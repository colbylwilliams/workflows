name: Fidalgo Environment

on:
  push:
  create:
  delete:
  pull_request:
    types: [opened, reopened, synchronize, closed]

concurrency: ${{ github.event.number || github.ref_name }}

env:
  # format: ci-[branch|pr]-[branch name|pr number]-suffex
  ENVIRONMENT_NAME: ci-${{ github.event_name == 'pull_request' && 'pr' || 'branch' }}-${{ github.event_name == 'pull_request' && github.event.number || github.event_name == 'push' && github.ref_name || github.event.ref }}-${{ github.event.repository.id }}

  # branch/Pull request  | Environment Type
  # ---------------------------------------
  # dev/feature branches | Dev
  # feature -> dev PRs   | Test
  # dev -> main PRs      | Pre-Prod
  # main branch          | Prod
  ENVIRONMENT_TYPE: ${{ github.event_name == 'push' && (github.event.ref == 'refs/heads/main' && 'Prod' || 'Dev') || github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' && 'Pre-Prod' || 'Test') || 'Dev' }}

jobs:
  # config:
  #   if: github.event_name == 'pull_request' || github.event.ref_type == 'branch'
  #   name: Get Environment
  #   uses: colbylwilliams/msdev/.github/workflows/env_config.yml@main

  config:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.get_config.outputs.name }}
      type: ${{ steps.get_config.outputs.type }}

    steps:
      - run: echo "- **Environment Name**  ${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **Environment Type**  ${{ env.ENVIRONMENT_TYPE }}" >> $GITHUB_STEP_SUMMARY

      - id: get_config
        name: Set Outputs
        shell: python
        run: |
          env_name = '${{ env.ENVIRONMENT_NAME }}'
          env_type = '${{ env.ENVIRONMENT_TYPE }}'

          print("::set-output name=name::{}".format(env_name))
          print("::set-output name=type::{}".format(env_type))

  manage_env:
    name: Manage Environment
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || (github.event_name == 'create' && github.event.ref_type == 'branch')
    needs: config
    environment:
      name: ${{ env.ENVIRONMENT_TYPE }}
    permissions:
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - id: msdev
        name: Ensure Environment
        uses: colbylwilliams/msdev@main
        with:
          name: ${{ needs.config.outputs.name }}
          type: ${{ needs.config.outputs.type }}
          createIfNotExists: (github.event_name == 'pull_request' && github.event.action != 'closed') || (github.event_name != 'delete')

      - name: Update Environment
        if: ((github.event_name == 'pull_request' && github.event.action == 'synchronize') || (github.event_name == 'push' && contains(github.event.ref, 'refs/heads') && !github.event.created)) && steps.msdev.outputs.exists == 'true' && steps.msdev.outputs.created == 'false'
        run: |
          az fidalgo admin environment deploy -g ${{ steps.msdev.outputs.project_group }} --project-name ${{ steps.msdev.outputs.project_name }} -n ${{ needs.config.outputs.name }}

      - name: Delete Environment
        if: ((github.event_name == 'pull_request' && github.event.action == 'closed') || (github.event_name == 'delete' && github.event.ref_type == 'branch')) && steps.msdev.outputs.exists == 'true'
        run: |
          az fidalgo admin environment delete -g ${{ steps.msdev.outputs.project_group }} --project-name ${{ steps.msdev.outputs.project_name }} -n ${{ needs.config.outputs.name }} -y

      - name: Add Link to Pull Request
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const tenantId = '${{ steps.msdev.outputs.tenant }}';
            const resourceId = '${{ steps.msdev.outputs.group }}';

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `The source in this Pull Request has been deployed to Azure for review and can be accessed [here](https://portal.azure.com/#@${tenantId}/resource${resourceId})`,
            });

  # create_env:
  #   name: Create Environment
  #   runs-on: ubuntu-latest
  #   if: (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || (github.event_name == 'create' && github.event.ref_type == 'branch')
  #   needs: config
  #   environment:
  #     name: ${{ needs.config.outputs.type }}
  #   permissions:
  #     issues: write
  #     pull-requests: write

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Login to Azure CLI
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - id: msdev
  #       name: Create Environment
  #       uses: colbylwilliams/msdev@main
  #       with:
  #         name: ${{ needs.config.outputs.name }}
  #         type: ${{ needs.config.outputs.type }}
  #         createIfNotExists: true

  #     - name: Add Link to Pull Request
  #       if: github.event_name == 'pull_request' && github.event.action == 'opened'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const tenantId = '${{ steps.msdev.outputs.tenant }}';
  #           const resourceId = '${{ steps.msdev.outputs.group }}';

  #           github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             body: `The source in this Pull Request has been deployed to Azure for review and can be accessed [here](https://portal.azure.com/#@${tenantId}/resource${resourceId})`,
  #           });

  # update_env:
  #   if: (github.event_name == 'pull_request' && github.event.action == 'synchronize') || (github.event_name == 'push' && contains(github.event.ref, 'refs/heads') && !github.event.created)
  #   name: Update Environment
  #   runs-on: ubuntu-latest
  #   needs: config
  #   environment:
  #     name: ${{ needs.config.outputs.type }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Login to Azure CLI
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - id: msdev
  #       name: Ensure Environment
  #       uses: colbylwilliams/msdev@main
  #       with:
  #         name: ${{ needs.config.outputs.name }}
  #         type: ${{ needs.config.outputs.type }}
  #         createIfNotExists: true

  #     - name: Update Environment
  #       if: ((github.event_name == 'pull_request' && github.event.action == 'synchronize') || (github.event_name == 'push' && contains(github.event.ref, 'refs/heads') && !github.event.created)) && steps.msdev.outputs.exists == 'true' && steps.msdev.outputs.created == 'false'
  #       run: |
  #         az fidalgo admin environment deploy -g ${{ steps.msdev.outputs.project_group }} --project-name ${{ steps.msdev.outputs.project_name }} -n ${{ needs.config.outputs.name }}

  # delete_env:
  #   name: Delete Environment
  #   runs-on: ubuntu-latest
  #   if: (github.event_name == 'pull_request' && github.event.action == 'closed') || (github.event_name == 'delete' && github.event.ref_type == 'branch')
  #   needs: config
  #   environment:
  #     name: ${{ needs.config.outputs.type }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Login to Azure CLI
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - id: msdev
  #       name: Get Environment
  #       uses: colbylwilliams/msdev@main
  #       with:
  #         name: ${{ needs.config.outputs.name }}
  #         type: ${{ needs.config.outputs.type }}

  #     - name: Delete Environment
  #       if: ${{ steps.msdev.outputs.exists == 'true' }}
  #       run: |
  #         az fidalgo admin environment delete -g ${{ steps.msdev.outputs.project_group }} --project-name ${{ steps.msdev.outputs.project_name }} -n ${{ needs.config.outputs.name }} -y
